# Internationalization (i18n) Rules

**ALWAYS use internationalization** for any text content in the application. Never hardcode text strings in components.

## Core Principles

### 🌐 **Always Use `useTranslations`**

- **MANDATORY**: Use `useTranslations` from `next-intl` for ALL text content
- **NO hardcoded strings** in components, pages, or UI elements
- **Consistent namespace organization** for maintainable translations

### 📁 **Translation File Structure**

All translations are stored in `/locales/` directory:

```
locales/
├── en.json     # English (default)
├── es.json     # Spanish
└── [locale].json
```

**Important**: For the specific translation structure and organization patterns, see the detailed **Translation Structure Rules** in `translation-structure.mdc`.

## Implementation Rules

### ✅ **DO:**

```tsx
// ✅ CORRECT: Using useTranslations with proper structure
import { useTranslations } from 'next-intl';

const GardenPlotsPage = () => {
  const t = useTranslations('pages.garden.plots');
  const tCommon = useTranslations('common');

  return (
    <div>
      <h1>{t('title')}</h1>
      <Button>{t('actions.create')}</Button>
      <p>{tCommon('loading')}</p>
    </div>
  );
};
```

```tsx
// ✅ CORRECT: Scoped translations for components
const CreatePlotDialog = () => {
  const t = useTranslations('pages.garden.plots.form');
  const tCommon = useTranslations('common');

  return (
    <Dialog>
      <DialogTitle>{t('title')}</DialogTitle>
      <Button>{tCommon('save')}</Button>
      <Button>{tCommon('cancel')}</Button>
    </Dialog>
  );
};
```

### ❌ **DON'T:**

```tsx
// ❌ WRONG: Hardcoded text
const GardenPlotsPage = () => {
  return (
    <div>
      <h1>Plot Management</h1> {/* Should use t('title') */}
      <Button>Create Plot</Button> {/* Should use t('actions.create') */}
    </div>
  );
};
```

```tsx
// ❌ WRONG: Mixed hardcoded and translated text
const ProfilePage = () => {
  const t = useTranslations('pages.profile');

  return (
    <div>
      <h1>{t('title')}</h1>
      <p>Loading...</p> {/* Should use tCommon('loading') */}
    </div>
  );
};
```

## Translation Keys Best Practices

### 🏷️ **Key Naming Conventions**

- **camelCase** for keys: `createPlot`, `searchPlaceholder`
- **Descriptive names**: `passwordsDontMatch` not `error1`
- **Hierarchical structure**: Follow the patterns in `translation-structure.mdc`

### 📂 **Namespace Usage Patterns**

- **Common elements**: `useTranslations('common')`
- **Page content**: `useTranslations('pages.[area].[page]')`
- **Navigation**: `useTranslations('navigation')`
- **Forms**: `useTranslations('pages.[area].[page].form')`
- **Actions**: `useTranslations('pages.[area].[page].actions')`

## Development Workflow

### 🔄 **Adding New Text Content**

1. **Check if translation exists** in `common` first
2. **Identify correct namespace** according to structure rules
3. **Add to BOTH** `en.json` and `es.json` simultaneously
4. **Follow established patterns** for consistency
5. **Import and use** `useTranslations` in component
6. **Test both languages** to ensure translations work

### 📝 **Example Workflow**

Adding new validation error for irrigation form:

1. **Add to both locales following structure:**

```json
// en.json
{
  "pages": {
    "garden": {
      "irrigation": {
        "form": {
          "errors": {
            "durationRequired": "Duration is required",
            "durationInvalid": "Please enter a valid duration"
          }
        }
      }
    }
  }
}

// es.json
{
  "pages": {
    "garden": {
      "irrigation": {
        "form": {
          "errors": {
            "durationRequired": "La duración es obligatoria",
            "durationInvalid": "Por favor ingresa una duración válida"
          }
        }
      }
    }
  }
}
```

2. **Use in component:**

```tsx
const IrrigationForm = () => {
  const t = useTranslations('pages.garden.irrigation.form.errors');

  const validate = (duration) => {
    if (!duration) {
      return t('durationRequired');
    }
    if (isNaN(duration)) {
      return t('durationInvalid');
    }
  };
};
```

## Quality Standards

### 🎯 **Translation Quality**

- **Consistent terminology** across the app (see translation-structure.mdc for terms)
- **Natural language** in each locale
- **Context-appropriate** tone and formality
- **Complete coverage** - no missing translations
- **Emoji usage** in navigation items as specified

### 🔍 **Code Quality**

- **Single responsibility**: One translation namespace per logical section
- **No duplication**: Reuse common translations
- **Type safety**: Use TypeScript for translation keys when possible
- **Performance**: Scope translations appropriately (don't import all)

## Integration Guidelines

### 🏗️ **With Atomic Design**

- **Atoms**: Use `common` translations for generic elements
- **Molecules**: Component-specific translations from appropriate page namespace
- **Organisms**: Feature/page-specific translations
- **Pages**: Use `pages.[area].[page]` namespace structure

### 🔗 **With Next.js**

- Follow Next.js i18n routing patterns
- Use locale parameters in dynamic routes
- Ensure SSR compatibility with translations
- Respect the established GreenHub structure

## Related Documentation

- **Translation Structure**: See `translation-structure.mdc` for detailed hierarchy and patterns
- **Component Guidelines**: Follow Atomic Design principles
- **Code Standards**: Maintain consistency with project conventions

**Remember**: Every piece of user-facing text must be translatable and follow the GreenHub structure. This ensures accessibility, maintainability, and consistency across the entire application.

---
